generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           String @id @default(cuid())
  kakaoId      String @unique
  role         Role   @default(USER)
  tier         Tier   @default(SPROUT)
  email        String
  name         String
  nickname     String
  phone        String
  profileImage String
  point        Int    @default(0)

  posts                  Post[]
  comments               Comment[]
  orders                 Order[]
  productReviews         ProductReview[]
  auditionResultComments AuditionComment[]

  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()
}

model Post {
  id      String @id @default(cuid())
  title   String
  content String

  comments Comment[]

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()
}

model Comment {
  id      String @id @default(cuid())
  content String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String

  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()
}

model Notice {
  id String @id @default(cuid())

  title   String
  content String

  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()
}

model Audition {
  id      String @id @default(cuid())
  title   String
  content String

  imageUrls String[]
  comments  AuditionComment[]

  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()
}

model AuditionComment {
  id      String @id @default(cuid())
  content String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  audition   Audition @relation(fields: [auditionId], references: [id], onDelete: Cascade)
  auditionId String

  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()
}

model Category {
  id   String @id @default(cuid())
  name String @unique

  products Product[]

  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()
}

model Product {
  id            String   @id @default(cuid())
  name          String
  price         Int
  description   String
  contentUrl    String
  contactUrl    String?
  published     Boolean
  requiredRole  Role    @default(USER)
  isPriceHidden Boolean? @default(false)

  thumbnailUrl    String
  detailImageUrls String[]

  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String

  productReviews ProductReview[]
  orders         OrderItem[]
  faqs           Faq[]

  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()
}

model Order {
  id          String      @unique @default(cuid())
  orderNumber String
  point       Int
  status      OrderStatus

  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  orderItems OrderItem[]

  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()
}

model OrderItem {
  id     String @id @default(cuid())
  amount Int
  price  Int

  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId String

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()
}

model ProductReview {
  id        String   @id @default(cuid())
  content   String
  rating    Int
  imageUrls String[]

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()
}

model Faq {
  id      String @id @default(cuid())
  title   String
  content String

  product   Product? @relation(fields: [productId], references: [id])
  productId String?

  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()
}

enum Role {
  ADMIN
  USER
  MENTOR_CREW
  CREW
  TUTOR_CREW
}

enum Tier {
  SPROUT
  SILVER
  GOLD
  DIAMOND
}

enum OrderStatus {
  PAYMENT_PENDING
  PAYMENT_COMPLETED
}
