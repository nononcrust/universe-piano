// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  kakaoId                String            @unique
  role                   Role              @default(USER)
  tier                   Tier              @default(SPROUT)
  email                  String
  nickname               String
  phone                  String
  profileImage           String
  point                  Int               @default(0)
  reviews                Review[]
  orders                 Order[]
  posts                  Post[]
  comments               Comment[]
  auditionResultComments AuditionComment[]
}

model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title   String
  content String

  comments Comment[]
  images   Image[]

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@index([userId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  content String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int

  @@index([userId])
  @@index([postId])
}

model Image {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  url String

  post   Post @relation(fields: [postId], references: [id])
  postId Int

  @@index([postId])
}

model Notice {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title   String
  content String
}

model Audition {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title   String
  content String
  image   String?

  comments AuditionComment[]
}

model AuditionComment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  content String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  audition   Audition @relation(fields: [auditionId], references: [id], onDelete: Cascade)
  auditionId Int

  @@index([userId])
  @@index([auditionId])
}

model Category {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name     String
  products Product[]
}

model Product {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  categoryId Int

  name        String
  price       Int
  description String
  reviews     Review[]
  orders      Order[]
  image       String

  category Category @relation(fields: [categoryId], references: [id])

  @@index([categoryId])
}

model Order {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    String
  productId Int
  status    OrderStatus

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@index([userId])
  @@index([productId])
}

model Review {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title     String
  content   String
  rating    Int
  userId    String
  productId Int
  image     String

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@index([userId])
  @@index([productId])
}

enum Role {
  ADMIN
  USER
}

enum Tier {
  SPROUT
  SILVER
  GOLD
  DIAMOND
}

enum OrderStatus {
  PAYMENT_PENDING
  PAYMENT_COMPLETED
}
