// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id           String @id @default(cuid())
  kakaoId      String @unique
  role         Role   @default(USER)
  tier         Tier   @default(SPROUT)
  email        String
  name         String
  nickname     String
  phone        String
  profileImage String
  point        Int    @default(0)

  posts                  Post[]
  comments               Comment[]
  cart                   Cart?
  orders                 Order[]
  productReviews         ProductReview[]
  auditionResultComments AuditionComment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id      String @id @default(cuid())
  title   String
  content String

  comments Comment[]
  images   Image[]

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Comment {
  id      String @id @default(cuid())
  content String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([postId])
}

model Image {
  id  String @id @default(cuid())
  url String

  post   Post?   @relation(fields: [postId], references: [id])
  postId String?

  audition   Audition? @relation(fields: [auditionId], references: [id])
  auditionId String?

  product   Product? @relation(fields: [productId], references: [id])
  productId String?

  productReview   ProductReview? @relation(fields: [productReviewId], references: [id])
  productReviewId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([postId])
  @@index([auditionId])
  @@index([productId])
  @@index([productReviewId])
}

model Notice {
  id String @id @default(cuid())

  title   String
  content String @db.LongText

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Audition {
  id      String @id @default(cuid())
  title   String
  content String @db.LongText

  images   Image[]
  comments AuditionComment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AuditionComment {
  id      String @id @default(cuid())
  content String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  audition   Audition @relation(fields: [auditionId], references: [id], onDelete: Cascade)
  auditionId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([auditionId])
}

model Category {
  id   String @id @default(cuid())
  name String @unique

  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          String @id @default(cuid())
  name        String
  price       Int
  description String
  contentUrl  String

  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String

  images         Image[]
  productReviews ProductReview[]
  orders         OrderItem[]
  cartItems      CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
}

model Cart {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @id

  cartItems CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model CartItem {
  amount Int

  cart   Cart   @relation(fields: [cartId], references: [userId], onDelete: Cascade)
  cartId String

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  @@unique([cartId, productId], name: "CartItem_cartId_productId_unique")
  @@index([productId])
}

model Order {
  id     String      @unique @default(cuid())
  number Int         @id @default(autoincrement())
  point  Int
  status OrderStatus

  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  orderItems OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model OrderItem {
  id     String @id @default(cuid())
  amount Int
  price  Int

  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId String

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orderId])
  @@index([productId])
}

model ProductReview {
  id      String  @id @default(cuid())
  content String  @db.LongText
  rating  Int
  images  Image[]

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([productId])
}

enum Role {
  ADMIN
  USER
}

enum Tier {
  SPROUT
  SILVER
  GOLD
  DIAMOND
}

enum OrderStatus {
  PAYMENT_PENDING
  PAYMENT_COMPLETED
}
